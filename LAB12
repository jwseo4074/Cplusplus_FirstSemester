#include <iostream>
using namespace std;

class StackException	{
	const string msg;
public:
	StackException(const string& msg)
		:msg(msg)	{};
	void print() const	{
		cout << msg << endl;
	}
};

class CharStack	{
	int size;
	int top;
	char* s;
public:
	CharStack(int sz)	{
		top = 0;
		if (sz <= 0)	{
			throw StackException("ERROR_CharStack(int sz) : size of s is less or equal than 0 ");
		}
		s = new char[size = sz];
	}
	CharStack(const CharStack& charstack)	{
		s = new char[size = charstack.size];
		top = charstack.top;
		for (int i = 0; i < size; i++)	{
			s[i] = charstack.s[i];
		}
	}

	CharStack& operator = (const CharStack& charstack2)	{
		size = charstack2.size;
		s = new char[size];
		int last = 0;
		for (int i = 0; i < size; i++)	{
			s[i] = charstack2.s[i];
			if (i == size - 1)
				last = i;
		}
		s[last] = '\n';
		return *this;
	}

	void push(char c)	{
		s[top++] = c;
		if (top > size)	{
			s[top--] = '\n';
			throw StackException("ERROR_push() : top is over than size");
		}
	}

	char pop()	{
		if (top == 0)	{
			throw StackException("ERROR_pop() : next element number is less than 0");
		}
		char r = s[--top];
		s[top] = '\0';
		return r;
	}

	void print() const	{
		for (int i = 0; i < top; i++)
			cout << s[i];
		cout << endl;
	}
	~CharStack()
	{};
};
int main()	{
	cout << " < First test > is CharStack(int sz) error" << endl;
	cout << "" << endl;
	int input_number;
	cin >> input_number;
	cout << "" << endl;
	try
	{
		CharStack c(input_number);
	}



	catch (const StackException& s)	{
		s.print();
	}
	cout << "" << endl;
	cout << " < Second test > is push error" << endl;
	cout << "" << endl;
	CharStack c1(3);
	c1.push('1');
	c1.push('2');
	c1.push('3');
	try	{
		c1.push('4');
	}
	catch (const StackException& s1)	{
		s1.print();
	}
	cout << "" << endl;
	cout << " < Third test > is pop error" << endl;
	cout << "" << endl;
	try {
		c1.pop();
		c1.pop();
		c1.pop();
		c1.pop();
	}
	catch (const StackException& s2)	{
		s2.print();
	}
}
