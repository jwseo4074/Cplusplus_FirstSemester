#include <iostream>
#include <vector>
#include <cassert>
using namespace std;

int num = 0;
struct Rectangle	{
	int width;
	int height;
};

enum CommandKind { ADD, SORT, PRINT, CLEAR, EXIT, INVALID };
/*
for (it = rectangles.begin(); it != rectangles.end(); it++)
{
	print(*it, no);
}        했을때 =>
*/
void print(const Rectangle& it)	{
	int RectArea = it.width * it.height;
	cout << "	" << it.width << "   " << it.height << "   " << RectArea << endl;
}
/*  print(rectangles) 했을때 =>
void print(const vector<Rectangle>& rectangles)
{
	cout << "Rectangle Count: " << rectangles.size() << "\n";
	vector<Rectangle>::const_iterator i;
	for (i = rectangles.begin(); i != rectangles.end(); ++i)
		cout << "\t" << i->height << " " << i->width << " " << (i->height) * (i->width) << "\n";
}*/


void swap(vector <Rectangle>& rec, int no)	{
	for (int x = 0; x < no; x++)	{
		for (int y = x + 1; y < no; y++) {
			int areax = rec[x].width * rec[x].height;
			int areay = rec[y].width * rec[y].height;
			if (areax > areay) {
				int tempwidth = rec[x].width;
				int tempheight = rec[x].height;
				rec[x].width = rec[y].width;
				rec[x].height = rec[y].height;
				rec[y].width = tempwidth;
				rec[y].height = tempheight;
			}
		}
	}

}

void sort(vector<Rectangle>& rec, const int I)	{
	swap(rec, i);
}

Rectangle getRectangle()		{
	Rectangle rec;
	int a = 0;
	int b = 0;
	cin >> a;
	cin >> b;
	rec.width = a;
	rec.height = b;
	return rec;
}

CommandKind getCommandKind(string get_str)	{
	vector <CommandKind> vec_com;
	vec_com = { ADD, SORT, PRINT, CLEAR, EXIT, INVALID };
	if (get_str == "ADD")
		return vec_com[0];
	else if (get_str == "SORT")
		return vec_com[1];
	else if (get_str == "PRINT")
		return vec_com[2];
	else if (get_str == "CLEAR")
		return vec_com[3];
	else if (get_str == "EXIT")
		return vec_com[4];
	else if (get_str == "INVALID")
		return vec_com[5];
}




void main()	{
	vector<Rectangle> rectangles;
	vector <Rectangle>::iterator it;
	while (true)	{
		string commandString;
		cin >> commandString;
		const CommandKind command = getCommandKind(commandString);
		switch (command)	{
		case ADD:	{
			const Rectangle& newRectangle = getRectangle();
			rectangles.push_back(newRectangle);
			num++;
			break;
		}
		case PRINT:	{
			cout << "Rectangle Count: " << num << endl;
			for (it = rectangles.begin(); it != rectangles.end(); it++)
			{
				print(*it);
			}
			break;
		}		
		case SORT:	{
			sort(rectangles, num); 
			cout << "Rectangle Count: " << num << endl;
			for (it = rectangles.begin(); it != rectangles.end(); it++)
			{
				print(*it);
			}
			break;
		}
		case CLEAR:	{
			rectangles.clear();
			num = 0;
			break;
		}
		case EXIT: break;
		default: assert(false); break;
		}
		if (command == EXIT) break;
	}
}
